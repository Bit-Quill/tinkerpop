/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tinkerpop.gremlin.language.property_graphs;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * An id or property value; either an atomic (simple) value, or a list, map, or set value
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-07")
public class Value extends org.apache.thrift.TUnion<Value, Value._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Value");
  private static final org.apache.thrift.protocol.TField ATOMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("atomic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LIST_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("listEsc", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("array", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("mapEsc", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SET_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("setEsc", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField SERIALIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("serialized", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * An atomic (simple) value
     * 
     * @type org/apache/tinkerpop/gremlin/language/property_graphs.AtomicValue
     */
    ATOMIC((short)1, "atomic"),
    /**
     * An ordered list value
     * 
     * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
     */
    LIST_ESC((short)2, "listEsc"),
    /**
     * An array value. Like a list, but also supporting efficient random access
     * 
     * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
     */
    ARRAY((short)3, "array"),
    /**
     * A map of arbitrary string keys to arbitrary values
     * 
     * @type map:
     *         keys: string
     *         values: org/apache/tinkerpop/gremlin/language/property_graphs.Value
     */
    MAP_ESC((short)4, "mapEsc"),
    /**
     * A set of unique values
     * 
     * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Value
     */
    SET_ESC((short)5, "setEsc"),
    /**
     * A serialized object which the application should be capable of decoding
     * 
     * @type org/apache/tinkerpop/gremlin/language/property_graphs.SerializedValue
     */
    SERIALIZED((short)6, "serialized");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATOMIC
          return ATOMIC;
        case 2: // LIST_ESC
          return LIST_ESC;
        case 3: // ARRAY
          return ARRAY;
        case 4: // MAP_ESC
          return MAP_ESC;
        case 5: // SET_ESC
          return SET_ESC;
        case 6: // SERIALIZED
          return SERIALIZED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATOMIC, new org.apache.thrift.meta_data.FieldMetaData("atomic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AtomicValue.class)));
    tmpMap.put(_Fields.LIST_ESC, new org.apache.thrift.meta_data.FieldMetaData("listEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.ARRAY, new org.apache.thrift.meta_data.FieldMetaData("array", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.MAP_ESC, new org.apache.thrift.meta_data.FieldMetaData("mapEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.SET_ESC, new org.apache.thrift.meta_data.FieldMetaData("setEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Value"))));
    tmpMap.put(_Fields.SERIALIZED, new org.apache.thrift.meta_data.FieldMetaData("serialized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SerializedValue.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Value.class, metaDataMap);
  }

  public Value() {
    super();
  }

  public Value(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Value(Value other) {
    super(other);
  }
  public Value deepCopy() {
    return new Value(this);
  }

  public static Value atomic(AtomicValue value) {
    Value x = new Value();
    x.setAtomic(value);
    return x;
  }

  public static Value listEsc(java.util.List<Value> value) {
    Value x = new Value();
    x.setListEsc(value);
    return x;
  }

  public static Value array(java.util.List<Value> value) {
    Value x = new Value();
    x.setArray(value);
    return x;
  }

  public static Value mapEsc(java.util.Map<java.lang.String,Value> value) {
    Value x = new Value();
    x.setMapEsc(value);
    return x;
  }

  public static Value setEsc(java.util.Set<Value> value) {
    Value x = new Value();
    x.setSetEsc(value);
    return x;
  }

  public static Value serialized(SerializedValue value) {
    Value x = new Value();
    x.setSerialized(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case ATOMIC:
        if (value instanceof AtomicValue) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type AtomicValue for field 'atomic', but got " + value.getClass().getSimpleName());
      case LIST_ESC:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<Value> for field 'listEsc', but got " + value.getClass().getSimpleName());
      case ARRAY:
        if (value instanceof java.util.List) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.List<Value> for field 'array', but got " + value.getClass().getSimpleName());
      case MAP_ESC:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Map<java.lang.String,Value> for field 'mapEsc', but got " + value.getClass().getSimpleName());
      case SET_ESC:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.util.Set<Value> for field 'setEsc', but got " + value.getClass().getSimpleName());
      case SERIALIZED:
        if (value instanceof SerializedValue) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type SerializedValue for field 'serialized', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case ATOMIC:
          if (field.type == ATOMIC_FIELD_DESC.type) {
            AtomicValue atomic;
            atomic = new AtomicValue();
            atomic.read(iprot);
            return atomic;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LIST_ESC:
          if (field.type == LIST_ESC_FIELD_DESC.type) {
            java.util.List<Value> listEsc;
            {
              org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
              listEsc = new java.util.ArrayList<Value>(_list8.size);
              @org.apache.thrift.annotation.Nullable Value _elem9;
              for (int _i10 = 0; _i10 < _list8.size; ++_i10)
              {
                _elem9 = new Value();
                _elem9.read(iprot);
                listEsc.add(_elem9);
              }
              iprot.readListEnd();
            }
            return listEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARRAY:
          if (field.type == ARRAY_FIELD_DESC.type) {
            java.util.List<Value> array;
            {
              org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
              array = new java.util.ArrayList<Value>(_list11.size);
              @org.apache.thrift.annotation.Nullable Value _elem12;
              for (int _i13 = 0; _i13 < _list11.size; ++_i13)
              {
                _elem12 = new Value();
                _elem12.read(iprot);
                array.add(_elem12);
              }
              iprot.readListEnd();
            }
            return array;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MAP_ESC:
          if (field.type == MAP_ESC_FIELD_DESC.type) {
            java.util.Map<java.lang.String,Value> mapEsc;
            {
              org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
              mapEsc = new java.util.HashMap<java.lang.String,Value>(2*_map14.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key15;
              @org.apache.thrift.annotation.Nullable Value _val16;
              for (int _i17 = 0; _i17 < _map14.size; ++_i17)
              {
                _key15 = iprot.readString();
                _val16 = new Value();
                _val16.read(iprot);
                mapEsc.put(_key15, _val16);
              }
              iprot.readMapEnd();
            }
            return mapEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_ESC:
          if (field.type == SET_ESC_FIELD_DESC.type) {
            java.util.Set<Value> setEsc;
            {
              org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
              setEsc = new java.util.HashSet<Value>(2*_set18.size);
              @org.apache.thrift.annotation.Nullable Value _elem19;
              for (int _i20 = 0; _i20 < _set18.size; ++_i20)
              {
                _elem19 = new Value();
                _elem19.read(iprot);
                setEsc.add(_elem19);
              }
              iprot.readSetEnd();
            }
            return setEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SERIALIZED:
          if (field.type == SERIALIZED_FIELD_DESC.type) {
            SerializedValue serialized;
            serialized = new SerializedValue();
            serialized.read(iprot);
            return serialized;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ATOMIC:
        AtomicValue atomic = (AtomicValue)value_;
        atomic.write(oprot);
        return;
      case LIST_ESC:
        java.util.List<Value> listEsc = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, listEsc.size()));
          for (Value _iter21 : listEsc)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case ARRAY:
        java.util.List<Value> array = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, array.size()));
          for (Value _iter22 : array)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case MAP_ESC:
        java.util.Map<java.lang.String,Value> mapEsc = (java.util.Map<java.lang.String,Value>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, mapEsc.size()));
          for (java.util.Map.Entry<java.lang.String, Value> _iter23 : mapEsc.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            _iter23.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case SET_ESC:
        java.util.Set<Value> setEsc = (java.util.Set<Value>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, setEsc.size()));
          for (Value _iter24 : setEsc)
          {
            _iter24.write(oprot);
          }
          oprot.writeSetEnd();
        }
        return;
      case SERIALIZED:
        SerializedValue serialized = (SerializedValue)value_;
        serialized.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case ATOMIC:
          AtomicValue atomic;
          atomic = new AtomicValue();
          atomic.read(iprot);
          return atomic;
        case LIST_ESC:
          java.util.List<Value> listEsc;
          {
            org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
            listEsc = new java.util.ArrayList<Value>(_list25.size);
            @org.apache.thrift.annotation.Nullable Value _elem26;
            for (int _i27 = 0; _i27 < _list25.size; ++_i27)
            {
              _elem26 = new Value();
              _elem26.read(iprot);
              listEsc.add(_elem26);
            }
            iprot.readListEnd();
          }
          return listEsc;
        case ARRAY:
          java.util.List<Value> array;
          {
            org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
            array = new java.util.ArrayList<Value>(_list28.size);
            @org.apache.thrift.annotation.Nullable Value _elem29;
            for (int _i30 = 0; _i30 < _list28.size; ++_i30)
            {
              _elem29 = new Value();
              _elem29.read(iprot);
              array.add(_elem29);
            }
            iprot.readListEnd();
          }
          return array;
        case MAP_ESC:
          java.util.Map<java.lang.String,Value> mapEsc;
          {
            org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
            mapEsc = new java.util.HashMap<java.lang.String,Value>(2*_map31.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key32;
            @org.apache.thrift.annotation.Nullable Value _val33;
            for (int _i34 = 0; _i34 < _map31.size; ++_i34)
            {
              _key32 = iprot.readString();
              _val33 = new Value();
              _val33.read(iprot);
              mapEsc.put(_key32, _val33);
            }
            iprot.readMapEnd();
          }
          return mapEsc;
        case SET_ESC:
          java.util.Set<Value> setEsc;
          {
            org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
            setEsc = new java.util.HashSet<Value>(2*_set35.size);
            @org.apache.thrift.annotation.Nullable Value _elem36;
            for (int _i37 = 0; _i37 < _set35.size; ++_i37)
            {
              _elem36 = new Value();
              _elem36.read(iprot);
              setEsc.add(_elem36);
            }
            iprot.readSetEnd();
          }
          return setEsc;
        case SERIALIZED:
          SerializedValue serialized;
          serialized = new SerializedValue();
          serialized.read(iprot);
          return serialized;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case ATOMIC:
        AtomicValue atomic = (AtomicValue)value_;
        atomic.write(oprot);
        return;
      case LIST_ESC:
        java.util.List<Value> listEsc = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, listEsc.size()));
          for (Value _iter38 : listEsc)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case ARRAY:
        java.util.List<Value> array = (java.util.List<Value>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, array.size()));
          for (Value _iter39 : array)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case MAP_ESC:
        java.util.Map<java.lang.String,Value> mapEsc = (java.util.Map<java.lang.String,Value>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, mapEsc.size()));
          for (java.util.Map.Entry<java.lang.String, Value> _iter40 : mapEsc.entrySet())
          {
            oprot.writeString(_iter40.getKey());
            _iter40.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case SET_ESC:
        java.util.Set<Value> setEsc = (java.util.Set<Value>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, setEsc.size()));
          for (Value _iter41 : setEsc)
          {
            _iter41.write(oprot);
          }
          oprot.writeSetEnd();
        }
        return;
      case SERIALIZED:
        SerializedValue serialized = (SerializedValue)value_;
        serialized.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case ATOMIC:
        return ATOMIC_FIELD_DESC;
      case LIST_ESC:
        return LIST_ESC_FIELD_DESC;
      case ARRAY:
        return ARRAY_FIELD_DESC;
      case MAP_ESC:
        return MAP_ESC_FIELD_DESC;
      case SET_ESC:
        return SET_ESC_FIELD_DESC;
      case SERIALIZED:
        return SERIALIZED_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * An atomic (simple) value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.AtomicValue
   */
  public AtomicValue getAtomic() {
    if (getSetField() == _Fields.ATOMIC) {
      return (AtomicValue)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'atomic' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * An atomic (simple) value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.AtomicValue
   */
  public void setAtomic(AtomicValue value) {
    setField_ = _Fields.ATOMIC;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.ATOMIC");
  }

  /**
   * An ordered list value
   * 
   * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public java.util.List<Value> getListEsc() {
    if (getSetField() == _Fields.LIST_ESC) {
      return (java.util.List<Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'listEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * An ordered list value
   * 
   * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public void setListEsc(java.util.List<Value> value) {
    setField_ = _Fields.LIST_ESC;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.LIST_ESC");
  }

  /**
   * An array value. Like a list, but also supporting efficient random access
   * 
   * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public java.util.List<Value> getArray() {
    if (getSetField() == _Fields.ARRAY) {
      return (java.util.List<Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'array' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * An array value. Like a list, but also supporting efficient random access
   * 
   * @type list: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public void setArray(java.util.List<Value> value) {
    setField_ = _Fields.ARRAY;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.ARRAY");
  }

  /**
   * A map of arbitrary string keys to arbitrary values
   * 
   * @type map:
   *         keys: string
   *         values: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public java.util.Map<java.lang.String,Value> getMapEsc() {
    if (getSetField() == _Fields.MAP_ESC) {
      return (java.util.Map<java.lang.String,Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'mapEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A map of arbitrary string keys to arbitrary values
   * 
   * @type map:
   *         keys: string
   *         values: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public void setMapEsc(java.util.Map<java.lang.String,Value> value) {
    setField_ = _Fields.MAP_ESC;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.MAP_ESC");
  }

  /**
   * A set of unique values
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public java.util.Set<Value> getSetEsc() {
    if (getSetField() == _Fields.SET_ESC) {
      return (java.util.Set<Value>)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'setEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A set of unique values
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public void setSetEsc(java.util.Set<Value> value) {
    setField_ = _Fields.SET_ESC;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.SET_ESC");
  }

  /**
   * A serialized object which the application should be capable of decoding
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.SerializedValue
   */
  public SerializedValue getSerialized() {
    if (getSetField() == _Fields.SERIALIZED) {
      return (SerializedValue)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'serialized' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A serialized object which the application should be capable of decoding
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.SerializedValue
   */
  public void setSerialized(SerializedValue value) {
    setField_ = _Fields.SERIALIZED;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.SERIALIZED");
  }

  public boolean isSetAtomic() {
    return setField_ == _Fields.ATOMIC;
  }


  public boolean isSetListEsc() {
    return setField_ == _Fields.LIST_ESC;
  }


  public boolean isSetArray() {
    return setField_ == _Fields.ARRAY;
  }


  public boolean isSetMapEsc() {
    return setField_ == _Fields.MAP_ESC;
  }


  public boolean isSetSetEsc() {
    return setField_ == _Fields.SET_ESC;
  }


  public boolean isSetSerialized() {
    return setField_ == _Fields.SERIALIZED;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Value) {
      return equals((Value)other);
    } else {
      return false;
    }
  }

  public boolean equals(Value other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Value other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
