/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tinkerpop.gremlin.language.property_graphs;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A simple value like a boolean, number, or string
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-06")
public class AtomicValue extends org.apache.thrift.TUnion<AtomicValue, AtomicValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AtomicValue");
  private static final org.apache.thrift.protocol.TField BOOLEAN_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanEsc", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("byteEsc", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLE_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleEsc", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FLOAT_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("floatEsc", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("integer", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LONG_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("longEsc", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_ESC_FIELD_DESC = new org.apache.thrift.protocol.TField("stringEsc", org.apache.thrift.protocol.TType.STRING, (short)7);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A boolean (true/false) value
     * 
     * @type boolean
     */
    BOOLEAN_ESC((short)1, "booleanEsc"),
    /**
     * A byte (8-bit integer) value
     * 
     * @type integer:
     *         precision:
     *           bits: 8
     */
    BYTE_ESC((short)2, "byteEsc"),
    /**
     * A double-precision (64-bit) floating point value
     * 
     * @type float:
     *         precision:
     *           bits: 64
     */
    DOUBLE_ESC((short)3, "doubleEsc"),
    /**
     * A single-precision (32-bit) floating point value
     * 
     * @type float
     */
    FLOAT_ESC((short)4, "floatEsc"),
    /**
     * A 32-bit integer value
     * 
     * @type integer
     */
    INTEGER((short)5, "integer"),
    /**
     * A 64-bit integer value
     * 
     * @type integer:
     *         precision:
     *           bits: 64
     */
    LONG_ESC((short)6, "longEsc"),
    /**
     * A string value
     * 
     * @type string
     */
    STRING_ESC((short)7, "stringEsc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOLEAN_ESC
          return BOOLEAN_ESC;
        case 2: // BYTE_ESC
          return BYTE_ESC;
        case 3: // DOUBLE_ESC
          return DOUBLE_ESC;
        case 4: // FLOAT_ESC
          return FLOAT_ESC;
        case 5: // INTEGER
          return INTEGER;
        case 6: // LONG_ESC
          return LONG_ESC;
        case 7: // STRING_ESC
          return STRING_ESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLEAN_ESC, new org.apache.thrift.meta_data.FieldMetaData("booleanEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_ESC, new org.apache.thrift.meta_data.FieldMetaData("byteEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DOUBLE_ESC, new org.apache.thrift.meta_data.FieldMetaData("doubleEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLOAT_ESC, new org.apache.thrift.meta_data.FieldMetaData("floatEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEGER, new org.apache.thrift.meta_data.FieldMetaData("integer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_ESC, new org.apache.thrift.meta_data.FieldMetaData("longEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRING_ESC, new org.apache.thrift.meta_data.FieldMetaData("stringEsc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AtomicValue.class, metaDataMap);
  }

  public AtomicValue() {
    super();
  }

  public AtomicValue(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public AtomicValue(AtomicValue other) {
    super(other);
  }
  public AtomicValue deepCopy() {
    return new AtomicValue(this);
  }

  public static AtomicValue booleanEsc(boolean value) {
    AtomicValue x = new AtomicValue();
    x.setBooleanEsc(value);
    return x;
  }

  public static AtomicValue byteEsc(short value) {
    AtomicValue x = new AtomicValue();
    x.setByteEsc(value);
    return x;
  }

  public static AtomicValue doubleEsc(double value) {
    AtomicValue x = new AtomicValue();
    x.setDoubleEsc(value);
    return x;
  }

  public static AtomicValue floatEsc(double value) {
    AtomicValue x = new AtomicValue();
    x.setFloatEsc(value);
    return x;
  }

  public static AtomicValue integer(int value) {
    AtomicValue x = new AtomicValue();
    x.setInteger(value);
    return x;
  }

  public static AtomicValue longEsc(long value) {
    AtomicValue x = new AtomicValue();
    x.setLongEsc(value);
    return x;
  }

  public static AtomicValue stringEsc(java.lang.String value) {
    AtomicValue x = new AtomicValue();
    x.setStringEsc(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case BOOLEAN_ESC:
        if (value instanceof java.lang.Boolean) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Boolean for field 'booleanEsc', but got " + value.getClass().getSimpleName());
      case BYTE_ESC:
        if (value instanceof java.lang.Short) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Short for field 'byteEsc', but got " + value.getClass().getSimpleName());
      case DOUBLE_ESC:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'doubleEsc', but got " + value.getClass().getSimpleName());
      case FLOAT_ESC:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'floatEsc', but got " + value.getClass().getSimpleName());
      case INTEGER:
        if (value instanceof java.lang.Integer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Integer for field 'integer', but got " + value.getClass().getSimpleName());
      case LONG_ESC:
        if (value instanceof java.lang.Long) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Long for field 'longEsc', but got " + value.getClass().getSimpleName());
      case STRING_ESC:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'stringEsc', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BOOLEAN_ESC:
          if (field.type == BOOLEAN_ESC_FIELD_DESC.type) {
            java.lang.Boolean booleanEsc;
            booleanEsc = iprot.readBool();
            return booleanEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BYTE_ESC:
          if (field.type == BYTE_ESC_FIELD_DESC.type) {
            java.lang.Short byteEsc;
            byteEsc = iprot.readI16();
            return byteEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_ESC:
          if (field.type == DOUBLE_ESC_FIELD_DESC.type) {
            java.lang.Double doubleEsc;
            doubleEsc = iprot.readDouble();
            return doubleEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FLOAT_ESC:
          if (field.type == FLOAT_ESC_FIELD_DESC.type) {
            java.lang.Double floatEsc;
            floatEsc = iprot.readDouble();
            return floatEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTEGER:
          if (field.type == INTEGER_FIELD_DESC.type) {
            java.lang.Integer integer;
            integer = iprot.readI32();
            return integer;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_ESC:
          if (field.type == LONG_ESC_FIELD_DESC.type) {
            java.lang.Long longEsc;
            longEsc = iprot.readI64();
            return longEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_ESC:
          if (field.type == STRING_ESC_FIELD_DESC.type) {
            java.lang.String stringEsc;
            stringEsc = iprot.readString();
            return stringEsc;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOLEAN_ESC:
        java.lang.Boolean booleanEsc = (java.lang.Boolean)value_;
        oprot.writeBool(booleanEsc);
        return;
      case BYTE_ESC:
        java.lang.Short byteEsc = (java.lang.Short)value_;
        oprot.writeI16(byteEsc);
        return;
      case DOUBLE_ESC:
        java.lang.Double doubleEsc = (java.lang.Double)value_;
        oprot.writeDouble(doubleEsc);
        return;
      case FLOAT_ESC:
        java.lang.Double floatEsc = (java.lang.Double)value_;
        oprot.writeDouble(floatEsc);
        return;
      case INTEGER:
        java.lang.Integer integer = (java.lang.Integer)value_;
        oprot.writeI32(integer);
        return;
      case LONG_ESC:
        java.lang.Long longEsc = (java.lang.Long)value_;
        oprot.writeI64(longEsc);
        return;
      case STRING_ESC:
        java.lang.String stringEsc = (java.lang.String)value_;
        oprot.writeString(stringEsc);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BOOLEAN_ESC:
          java.lang.Boolean booleanEsc;
          booleanEsc = iprot.readBool();
          return booleanEsc;
        case BYTE_ESC:
          java.lang.Short byteEsc;
          byteEsc = iprot.readI16();
          return byteEsc;
        case DOUBLE_ESC:
          java.lang.Double doubleEsc;
          doubleEsc = iprot.readDouble();
          return doubleEsc;
        case FLOAT_ESC:
          java.lang.Double floatEsc;
          floatEsc = iprot.readDouble();
          return floatEsc;
        case INTEGER:
          java.lang.Integer integer;
          integer = iprot.readI32();
          return integer;
        case LONG_ESC:
          java.lang.Long longEsc;
          longEsc = iprot.readI64();
          return longEsc;
        case STRING_ESC:
          java.lang.String stringEsc;
          stringEsc = iprot.readString();
          return stringEsc;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BOOLEAN_ESC:
        java.lang.Boolean booleanEsc = (java.lang.Boolean)value_;
        oprot.writeBool(booleanEsc);
        return;
      case BYTE_ESC:
        java.lang.Short byteEsc = (java.lang.Short)value_;
        oprot.writeI16(byteEsc);
        return;
      case DOUBLE_ESC:
        java.lang.Double doubleEsc = (java.lang.Double)value_;
        oprot.writeDouble(doubleEsc);
        return;
      case FLOAT_ESC:
        java.lang.Double floatEsc = (java.lang.Double)value_;
        oprot.writeDouble(floatEsc);
        return;
      case INTEGER:
        java.lang.Integer integer = (java.lang.Integer)value_;
        oprot.writeI32(integer);
        return;
      case LONG_ESC:
        java.lang.Long longEsc = (java.lang.Long)value_;
        oprot.writeI64(longEsc);
        return;
      case STRING_ESC:
        java.lang.String stringEsc = (java.lang.String)value_;
        oprot.writeString(stringEsc);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BOOLEAN_ESC:
        return BOOLEAN_ESC_FIELD_DESC;
      case BYTE_ESC:
        return BYTE_ESC_FIELD_DESC;
      case DOUBLE_ESC:
        return DOUBLE_ESC_FIELD_DESC;
      case FLOAT_ESC:
        return FLOAT_ESC_FIELD_DESC;
      case INTEGER:
        return INTEGER_FIELD_DESC;
      case LONG_ESC:
        return LONG_ESC_FIELD_DESC;
      case STRING_ESC:
        return STRING_ESC_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * A boolean (true/false) value
   * 
   * @type boolean
   */
  public boolean getBooleanEsc() {
    if (getSetField() == _Fields.BOOLEAN_ESC) {
      return (java.lang.Boolean)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'booleanEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A boolean (true/false) value
   * 
   * @type boolean
   */
  public void setBooleanEsc(boolean value) {
    setField_ = _Fields.BOOLEAN_ESC;
    value_ = value;
  }

  /**
   * A byte (8-bit integer) value
   * 
   * @type integer:
   *         precision:
   *           bits: 8
   */
  public short getByteEsc() {
    if (getSetField() == _Fields.BYTE_ESC) {
      return (java.lang.Short)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'byteEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A byte (8-bit integer) value
   * 
   * @type integer:
   *         precision:
   *           bits: 8
   */
  public void setByteEsc(short value) {
    setField_ = _Fields.BYTE_ESC;
    value_ = value;
  }

  /**
   * A double-precision (64-bit) floating point value
   * 
   * @type float:
   *         precision:
   *           bits: 64
   */
  public double getDoubleEsc() {
    if (getSetField() == _Fields.DOUBLE_ESC) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'doubleEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A double-precision (64-bit) floating point value
   * 
   * @type float:
   *         precision:
   *           bits: 64
   */
  public void setDoubleEsc(double value) {
    setField_ = _Fields.DOUBLE_ESC;
    value_ = value;
  }

  /**
   * A single-precision (32-bit) floating point value
   * 
   * @type float
   */
  public double getFloatEsc() {
    if (getSetField() == _Fields.FLOAT_ESC) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'floatEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A single-precision (32-bit) floating point value
   * 
   * @type float
   */
  public void setFloatEsc(double value) {
    setField_ = _Fields.FLOAT_ESC;
    value_ = value;
  }

  /**
   * A 32-bit integer value
   * 
   * @type integer
   */
  public int getInteger() {
    if (getSetField() == _Fields.INTEGER) {
      return (java.lang.Integer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'integer' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A 32-bit integer value
   * 
   * @type integer
   */
  public void setInteger(int value) {
    setField_ = _Fields.INTEGER;
    value_ = value;
  }

  /**
   * A 64-bit integer value
   * 
   * @type integer:
   *         precision:
   *           bits: 64
   */
  public long getLongEsc() {
    if (getSetField() == _Fields.LONG_ESC) {
      return (java.lang.Long)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'longEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A 64-bit integer value
   * 
   * @type integer:
   *         precision:
   *           bits: 64
   */
  public void setLongEsc(long value) {
    setField_ = _Fields.LONG_ESC;
    value_ = value;
  }

  /**
   * A string value
   * 
   * @type string
   */
  public java.lang.String getStringEsc() {
    if (getSetField() == _Fields.STRING_ESC) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stringEsc' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * A string value
   * 
   * @type string
   */
  public void setStringEsc(java.lang.String value) {
    setField_ = _Fields.STRING_ESC;
    value_ = java.util.Objects.requireNonNull(value,"_Fields.STRING_ESC");
  }

  public boolean isSetBooleanEsc() {
    return setField_ == _Fields.BOOLEAN_ESC;
  }


  public boolean isSetByteEsc() {
    return setField_ == _Fields.BYTE_ESC;
  }


  public boolean isSetDoubleEsc() {
    return setField_ == _Fields.DOUBLE_ESC;
  }


  public boolean isSetFloatEsc() {
    return setField_ == _Fields.FLOAT_ESC;
  }


  public boolean isSetInteger() {
    return setField_ == _Fields.INTEGER;
  }


  public boolean isSetLongEsc() {
    return setField_ == _Fields.LONG_ESC;
  }


  public boolean isSetStringEsc() {
    return setField_ == _Fields.STRING_ESC;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof AtomicValue) {
      return equals((AtomicValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(AtomicValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(AtomicValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
