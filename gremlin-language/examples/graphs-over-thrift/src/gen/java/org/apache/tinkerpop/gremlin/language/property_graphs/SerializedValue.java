/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tinkerpop.gremlin.language.property_graphs;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A value of a provided type which has been serialized in accordance with an encoding which is understood on the basis
 * of the type.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-08")
public class SerializedValue implements org.apache.thrift.TBase<SerializedValue, SerializedValue._Fields>, java.io.Serializable, Cloneable, Comparable<SerializedValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SerializedValue");

  private static final org.apache.thrift.protocol.TField ENCODING_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("encodingName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENCODED_FIELD_DESC = new org.apache.thrift.protocol.TField("encoded", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SerializedValueStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SerializedValueTupleSchemeFactory();

  /**
   * The unique name of the type of the serialized value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.EncodingName
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String encodingName; // required
  /**
   * The encoded (serialized) value as a string
   * 
   * @type string
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String encoded; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique name of the type of the serialized value
     * 
     * @type org/apache/tinkerpop/gremlin/language/property_graphs.EncodingName
     */
    ENCODING_NAME((short)1, "encodingName"),
    /**
     * The encoded (serialized) value as a string
     * 
     * @type string
     */
    ENCODED((short)2, "encoded");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENCODING_NAME
          return ENCODING_NAME;
        case 2: // ENCODED
          return ENCODED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENCODING_NAME, new org.apache.thrift.meta_data.FieldMetaData("encodingName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "EncodingName")));
    tmpMap.put(_Fields.ENCODED, new org.apache.thrift.meta_data.FieldMetaData("encoded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SerializedValue.class, metaDataMap);
  }

  public SerializedValue() {
  }

  public SerializedValue(
    java.lang.String encodingName,
    java.lang.String encoded)
  {
    this();
    this.encodingName = encodingName;
    this.encoded = encoded;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SerializedValue(SerializedValue other) {
    if (other.isSetEncodingName()) {
      this.encodingName = other.encodingName;
    }
    if (other.isSetEncoded()) {
      this.encoded = other.encoded;
    }
  }

  public SerializedValue deepCopy() {
    return new SerializedValue(this);
  }

  @Override
  public void clear() {
    this.encodingName = null;
    this.encoded = null;
  }

  /**
   * The unique name of the type of the serialized value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.EncodingName
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEncodingName() {
    return this.encodingName;
  }

  /**
   * The unique name of the type of the serialized value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.EncodingName
   */
  public SerializedValue setEncodingName(@org.apache.thrift.annotation.Nullable java.lang.String encodingName) {
    this.encodingName = encodingName;
    return this;
  }

  public void unsetEncodingName() {
    this.encodingName = null;
  }

  /** Returns true if field encodingName is set (has been assigned a value) and false otherwise */
  public boolean isSetEncodingName() {
    return this.encodingName != null;
  }

  public void setEncodingNameIsSet(boolean value) {
    if (!value) {
      this.encodingName = null;
    }
  }

  /**
   * The encoded (serialized) value as a string
   * 
   * @type string
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEncoded() {
    return this.encoded;
  }

  /**
   * The encoded (serialized) value as a string
   * 
   * @type string
   */
  public SerializedValue setEncoded(@org.apache.thrift.annotation.Nullable java.lang.String encoded) {
    this.encoded = encoded;
    return this;
  }

  public void unsetEncoded() {
    this.encoded = null;
  }

  /** Returns true if field encoded is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoded() {
    return this.encoded != null;
  }

  public void setEncodedIsSet(boolean value) {
    if (!value) {
      this.encoded = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENCODING_NAME:
      if (value == null) {
        unsetEncodingName();
      } else {
        setEncodingName((java.lang.String)value);
      }
      break;

    case ENCODED:
      if (value == null) {
        unsetEncoded();
      } else {
        setEncoded((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENCODING_NAME:
      return getEncodingName();

    case ENCODED:
      return getEncoded();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENCODING_NAME:
      return isSetEncodingName();
    case ENCODED:
      return isSetEncoded();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SerializedValue)
      return this.equals((SerializedValue)that);
    return false;
  }

  public boolean equals(SerializedValue that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_encodingName = true && this.isSetEncodingName();
    boolean that_present_encodingName = true && that.isSetEncodingName();
    if (this_present_encodingName || that_present_encodingName) {
      if (!(this_present_encodingName && that_present_encodingName))
        return false;
      if (!this.encodingName.equals(that.encodingName))
        return false;
    }

    boolean this_present_encoded = true && this.isSetEncoded();
    boolean that_present_encoded = true && that.isSetEncoded();
    if (this_present_encoded || that_present_encoded) {
      if (!(this_present_encoded && that_present_encoded))
        return false;
      if (!this.encoded.equals(that.encoded))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEncodingName()) ? 131071 : 524287);
    if (isSetEncodingName())
      hashCode = hashCode * 8191 + encodingName.hashCode();

    hashCode = hashCode * 8191 + ((isSetEncoded()) ? 131071 : 524287);
    if (isSetEncoded())
      hashCode = hashCode * 8191 + encoded.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SerializedValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEncodingName(), other.isSetEncodingName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncodingName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encodingName, other.encodingName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncoded(), other.isSetEncoded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoded, other.encoded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SerializedValue(");
    boolean first = true;

    sb.append("encodingName:");
    if (this.encodingName == null) {
      sb.append("null");
    } else {
      sb.append(this.encodingName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encoded:");
    if (this.encoded == null) {
      sb.append("null");
    } else {
      sb.append(this.encoded);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (encodingName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encodingName' was not present! Struct: " + toString());
    }
    if (encoded == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encoded' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SerializedValueStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SerializedValueStandardScheme getScheme() {
      return new SerializedValueStandardScheme();
    }
  }

  private static class SerializedValueStandardScheme extends org.apache.thrift.scheme.StandardScheme<SerializedValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SerializedValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENCODING_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encodingName = iprot.readString();
              struct.setEncodingNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENCODED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encoded = iprot.readString();
              struct.setEncodedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SerializedValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.encodingName != null) {
        oprot.writeFieldBegin(ENCODING_NAME_FIELD_DESC);
        oprot.writeString(struct.encodingName);
        oprot.writeFieldEnd();
      }
      if (struct.encoded != null) {
        oprot.writeFieldBegin(ENCODED_FIELD_DESC);
        oprot.writeString(struct.encoded);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SerializedValueTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SerializedValueTupleScheme getScheme() {
      return new SerializedValueTupleScheme();
    }
  }

  private static class SerializedValueTupleScheme extends org.apache.thrift.scheme.TupleScheme<SerializedValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SerializedValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.encodingName);
      oprot.writeString(struct.encoded);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SerializedValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.encodingName = iprot.readString();
      struct.setEncodingNameIsSet(true);
      struct.encoded = iprot.readString();
      struct.setEncodedIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

