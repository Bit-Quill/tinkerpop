/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tinkerpop.gremlin.language.property_graphs;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A property, or key/value pair which may be attached to vertices, edges, and occasionally other properties.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-08")
public class Property implements org.apache.thrift.TBase<Property, Property._Fields>, java.io.Serializable, Cloneable, Comparable<Property> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Property");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField METAPROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("metaproperties", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PropertyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PropertyTupleSchemeFactory();

  /**
   * The property's key
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.PropertyKey
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String key; // required
  /**
   * The property's value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public @org.apache.thrift.annotation.Nullable Value value; // required
  /**
   * Any metaproperties (properties of a property)
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Property
   */
  public @org.apache.thrift.annotation.Nullable java.util.Set<Property> metaproperties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The property's key
     * 
     * @type org/apache/tinkerpop/gremlin/language/property_graphs.PropertyKey
     */
    KEY((short)1, "key"),
    /**
     * The property's value
     * 
     * @type org/apache/tinkerpop/gremlin/language/property_graphs.Value
     */
    VALUE((short)2, "value"),
    /**
     * Any metaproperties (properties of a property)
     * 
     * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Property
     */
    METAPROPERTIES((short)3, "metaproperties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // VALUE
          return VALUE;
        case 3: // METAPROPERTIES
          return METAPROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "PropertyKey")));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Value")));
    tmpMap.put(_Fields.METAPROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("metaproperties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Property"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Property.class, metaDataMap);
  }

  public Property() {
  }

  public Property(
    java.lang.String key,
    Value value,
    java.util.Set<Property> metaproperties)
  {
    this();
    this.key = key;
    this.value = value;
    this.metaproperties = metaproperties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Property(Property other) {
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetValue()) {
      this.value = new Value(other.value);
    }
    if (other.isSetMetaproperties()) {
      java.util.Set<Property> __this__metaproperties = new java.util.HashSet<Property>(other.metaproperties.size());
      for (Property other_element : other.metaproperties) {
        __this__metaproperties.add(new Property(other_element));
      }
      this.metaproperties = __this__metaproperties;
    }
  }

  public Property deepCopy() {
    return new Property(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.value = null;
    this.metaproperties = null;
  }

  /**
   * The property's key
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.PropertyKey
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKey() {
    return this.key;
  }

  /**
   * The property's key
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.PropertyKey
   */
  public Property setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  /**
   * The property's value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  @org.apache.thrift.annotation.Nullable
  public Value getValue() {
    return this.value;
  }

  /**
   * The property's value
   * 
   * @type org/apache/tinkerpop/gremlin/language/property_graphs.Value
   */
  public Property setValue(@org.apache.thrift.annotation.Nullable Value value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public int getMetapropertiesSize() {
    return (this.metaproperties == null) ? 0 : this.metaproperties.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Property> getMetapropertiesIterator() {
    return (this.metaproperties == null) ? null : this.metaproperties.iterator();
  }

  public void addToMetaproperties(Property elem) {
    if (this.metaproperties == null) {
      this.metaproperties = new java.util.HashSet<Property>();
    }
    this.metaproperties.add(elem);
  }

  /**
   * Any metaproperties (properties of a property)
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Property
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Set<Property> getMetaproperties() {
    return this.metaproperties;
  }

  /**
   * Any metaproperties (properties of a property)
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Property
   */
  public Property setMetaproperties(@org.apache.thrift.annotation.Nullable java.util.Set<Property> metaproperties) {
    this.metaproperties = metaproperties;
    return this;
  }

  public void unsetMetaproperties() {
    this.metaproperties = null;
  }

  /** Returns true if field metaproperties is set (has been assigned a value) and false otherwise */
  public boolean isSetMetaproperties() {
    return this.metaproperties != null;
  }

  public void setMetapropertiesIsSet(boolean value) {
    if (!value) {
      this.metaproperties = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Value)value);
      }
      break;

    case METAPROPERTIES:
      if (value == null) {
        unsetMetaproperties();
      } else {
        setMetaproperties((java.util.Set<Property>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case VALUE:
      return getValue();

    case METAPROPERTIES:
      return getMetaproperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case VALUE:
      return isSetValue();
    case METAPROPERTIES:
      return isSetMetaproperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Property)
      return this.equals((Property)that);
    return false;
  }

  public boolean equals(Property that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_metaproperties = true && this.isSetMetaproperties();
    boolean that_present_metaproperties = true && that.isSetMetaproperties();
    if (this_present_metaproperties || that_present_metaproperties) {
      if (!(this_present_metaproperties && that_present_metaproperties))
        return false;
      if (!this.metaproperties.equals(that.metaproperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetaproperties()) ? 131071 : 524287);
    if (isSetMetaproperties())
      hashCode = hashCode * 8191 + metaproperties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Property other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMetaproperties(), other.isSetMetaproperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetaproperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaproperties, other.metaproperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Property(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metaproperties:");
    if (this.metaproperties == null) {
      sb.append("null");
    } else {
      sb.append(this.metaproperties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    if (value == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
    }
    if (metaproperties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metaproperties' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PropertyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertyStandardScheme getScheme() {
      return new PropertyStandardScheme();
    }
  }

  private static class PropertyStandardScheme extends org.apache.thrift.scheme.StandardScheme<Property> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Property struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new Value();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METAPROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.metaproperties = new java.util.HashSet<Property>(2*_set0.size);
                @org.apache.thrift.annotation.Nullable Property _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new Property();
                  _elem1.read(iprot);
                  struct.metaproperties.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setMetapropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Property struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        struct.value.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metaproperties != null) {
        oprot.writeFieldBegin(METAPROPERTIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.metaproperties.size()));
          for (Property _iter3 : struct.metaproperties)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PropertyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PropertyTupleScheme getScheme() {
      return new PropertyTupleScheme();
    }
  }

  private static class PropertyTupleScheme extends org.apache.thrift.scheme.TupleScheme<Property> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Property struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.key);
      struct.value.write(oprot);
      {
        oprot.writeI32(struct.metaproperties.size());
        for (Property _iter4 : struct.metaproperties)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Property struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      struct.value = new Value();
      struct.value.read(iprot);
      struct.setValueIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.metaproperties = new java.util.HashSet<Property>(2*_set5.size);
        @org.apache.thrift.annotation.Nullable Property _elem6;
        for (int _i7 = 0; _i7 < _set5.size; ++_i7)
        {
          _elem6 = new Property();
          _elem6.read(iprot);
          struct.metaproperties.add(_elem6);
        }
      }
      struct.setMetapropertiesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

