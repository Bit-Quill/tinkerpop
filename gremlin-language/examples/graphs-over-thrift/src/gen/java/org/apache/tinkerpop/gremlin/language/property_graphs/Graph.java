/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.tinkerpop.gremlin.language.property_graphs;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A graph, consisting of a set of vertices and a set of edges
 * 
 * @comments As a basic integrity constraint, the out- and in- vertex ids of the graph's edges must be among the ids of the graph's vertices.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-08")
public class Graph implements org.apache.thrift.TBase<Graph, Graph._Fields>, java.io.Serializable, Cloneable, Comparable<Graph> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Graph");

  private static final org.apache.thrift.protocol.TField VERTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("vertices", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("edges", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GraphStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GraphTupleSchemeFactory();

  /**
   * The set of all vertices in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Vertex
   */
  public @org.apache.thrift.annotation.Nullable java.util.Set<Vertex> vertices; // required
  /**
   * The set of all edges in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Edge
   */
  public @org.apache.thrift.annotation.Nullable java.util.Set<Edge> edges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The set of all vertices in the graph
     * 
     * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Vertex
     */
    VERTICES((short)1, "vertices"),
    /**
     * The set of all edges in the graph
     * 
     * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Edge
     */
    EDGES((short)2, "edges");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERTICES
          return VERTICES;
        case 2: // EDGES
          return EDGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERTICES, new org.apache.thrift.meta_data.FieldMetaData("vertices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
    tmpMap.put(_Fields.EDGES, new org.apache.thrift.meta_data.FieldMetaData("edges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edge.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Graph.class, metaDataMap);
  }

  public Graph() {
  }

  public Graph(
    java.util.Set<Vertex> vertices,
    java.util.Set<Edge> edges)
  {
    this();
    this.vertices = vertices;
    this.edges = edges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Graph(Graph other) {
    if (other.isSetVertices()) {
      java.util.Set<Vertex> __this__vertices = new java.util.HashSet<Vertex>(other.vertices.size());
      for (Vertex other_element : other.vertices) {
        __this__vertices.add(new Vertex(other_element));
      }
      this.vertices = __this__vertices;
    }
    if (other.isSetEdges()) {
      java.util.Set<Edge> __this__edges = new java.util.HashSet<Edge>(other.edges.size());
      for (Edge other_element : other.edges) {
        __this__edges.add(new Edge(other_element));
      }
      this.edges = __this__edges;
    }
  }

  public Graph deepCopy() {
    return new Graph(this);
  }

  @Override
  public void clear() {
    this.vertices = null;
    this.edges = null;
  }

  public int getVerticesSize() {
    return (this.vertices == null) ? 0 : this.vertices.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Vertex> getVerticesIterator() {
    return (this.vertices == null) ? null : this.vertices.iterator();
  }

  public void addToVertices(Vertex elem) {
    if (this.vertices == null) {
      this.vertices = new java.util.HashSet<Vertex>();
    }
    this.vertices.add(elem);
  }

  /**
   * The set of all vertices in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Vertex
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Set<Vertex> getVertices() {
    return this.vertices;
  }

  /**
   * The set of all vertices in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Vertex
   */
  public Graph setVertices(@org.apache.thrift.annotation.Nullable java.util.Set<Vertex> vertices) {
    this.vertices = vertices;
    return this;
  }

  public void unsetVertices() {
    this.vertices = null;
  }

  /** Returns true if field vertices is set (has been assigned a value) and false otherwise */
  public boolean isSetVertices() {
    return this.vertices != null;
  }

  public void setVerticesIsSet(boolean value) {
    if (!value) {
      this.vertices = null;
    }
  }

  public int getEdgesSize() {
    return (this.edges == null) ? 0 : this.edges.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Edge> getEdgesIterator() {
    return (this.edges == null) ? null : this.edges.iterator();
  }

  public void addToEdges(Edge elem) {
    if (this.edges == null) {
      this.edges = new java.util.HashSet<Edge>();
    }
    this.edges.add(elem);
  }

  /**
   * The set of all edges in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Edge
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.Set<Edge> getEdges() {
    return this.edges;
  }

  /**
   * The set of all edges in the graph
   * 
   * @type set: org/apache/tinkerpop/gremlin/language/property_graphs.Edge
   */
  public Graph setEdges(@org.apache.thrift.annotation.Nullable java.util.Set<Edge> edges) {
    this.edges = edges;
    return this;
  }

  public void unsetEdges() {
    this.edges = null;
  }

  /** Returns true if field edges is set (has been assigned a value) and false otherwise */
  public boolean isSetEdges() {
    return this.edges != null;
  }

  public void setEdgesIsSet(boolean value) {
    if (!value) {
      this.edges = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VERTICES:
      if (value == null) {
        unsetVertices();
      } else {
        setVertices((java.util.Set<Vertex>)value);
      }
      break;

    case EDGES:
      if (value == null) {
        unsetEdges();
      } else {
        setEdges((java.util.Set<Edge>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERTICES:
      return getVertices();

    case EDGES:
      return getEdges();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERTICES:
      return isSetVertices();
    case EDGES:
      return isSetEdges();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Graph)
      return this.equals((Graph)that);
    return false;
  }

  public boolean equals(Graph that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_vertices = true && this.isSetVertices();
    boolean that_present_vertices = true && that.isSetVertices();
    if (this_present_vertices || that_present_vertices) {
      if (!(this_present_vertices && that_present_vertices))
        return false;
      if (!this.vertices.equals(that.vertices))
        return false;
    }

    boolean this_present_edges = true && this.isSetEdges();
    boolean that_present_edges = true && that.isSetEdges();
    if (this_present_edges || that_present_edges) {
      if (!(this_present_edges && that_present_edges))
        return false;
      if (!this.edges.equals(that.edges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVertices()) ? 131071 : 524287);
    if (isSetVertices())
      hashCode = hashCode * 8191 + vertices.hashCode();

    hashCode = hashCode * 8191 + ((isSetEdges()) ? 131071 : 524287);
    if (isSetEdges())
      hashCode = hashCode * 8191 + edges.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Graph other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetVertices(), other.isSetVertices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertices, other.vertices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEdges(), other.isSetEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edges, other.edges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Graph(");
    boolean first = true;

    sb.append("vertices:");
    if (this.vertices == null) {
      sb.append("null");
    } else {
      sb.append(this.vertices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("edges:");
    if (this.edges == null) {
      sb.append("null");
    } else {
      sb.append(this.edges);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (vertices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vertices' was not present! Struct: " + toString());
    }
    if (edges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'edges' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GraphStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphStandardScheme getScheme() {
      return new GraphStandardScheme();
    }
  }

  private static class GraphStandardScheme extends org.apache.thrift.scheme.StandardScheme<Graph> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERTICES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin();
                struct.vertices = new java.util.HashSet<Vertex>(2*_set58.size);
                @org.apache.thrift.annotation.Nullable Vertex _elem59;
                for (int _i60 = 0; _i60 < _set58.size; ++_i60)
                {
                  _elem59 = new Vertex();
                  _elem59.read(iprot);
                  struct.vertices.add(_elem59);
                }
                iprot.readSetEnd();
              }
              struct.setVerticesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin();
                struct.edges = new java.util.HashSet<Edge>(2*_set61.size);
                @org.apache.thrift.annotation.Nullable Edge _elem62;
                for (int _i63 = 0; _i63 < _set61.size; ++_i63)
                {
                  _elem62 = new Edge();
                  _elem62.read(iprot);
                  struct.edges.add(_elem62);
                }
                iprot.readSetEnd();
              }
              struct.setEdgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Graph struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vertices != null) {
        oprot.writeFieldBegin(VERTICES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.vertices.size()));
          for (Vertex _iter64 : struct.vertices)
          {
            _iter64.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.edges != null) {
        oprot.writeFieldBegin(EDGES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.edges.size()));
          for (Edge _iter65 : struct.edges)
          {
            _iter65.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GraphTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphTupleScheme getScheme() {
      return new GraphTupleScheme();
    }
  }

  private static class GraphTupleScheme extends org.apache.thrift.scheme.TupleScheme<Graph> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.vertices.size());
        for (Vertex _iter66 : struct.vertices)
        {
          _iter66.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.edges.size());
        for (Edge _iter67 : struct.edges)
        {
          _iter67.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TSet _set68 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.vertices = new java.util.HashSet<Vertex>(2*_set68.size);
        @org.apache.thrift.annotation.Nullable Vertex _elem69;
        for (int _i70 = 0; _i70 < _set68.size; ++_i70)
        {
          _elem69 = new Vertex();
          _elem69.read(iprot);
          struct.vertices.add(_elem69);
        }
      }
      struct.setVerticesIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set71 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.edges = new java.util.HashSet<Edge>(2*_set71.size);
        @org.apache.thrift.annotation.Nullable Edge _elem72;
        for (int _i73 = 0; _i73 < _set71.size; ++_i73)
        {
          _elem72 = new Edge();
          _elem72.read(iprot);
          struct.edges.add(_elem72);
        }
      }
      struct.setEdgesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

